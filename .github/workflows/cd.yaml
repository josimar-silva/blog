name: Continuous Delivery

on:
  workflow_run:
    workflows: ["Continuous Integration"]
    types: [completed]
    branches: [main]

permissions:
  contents: read

jobs:
  fetch-version:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-24.04
    outputs:
      release_version: ${{ steps.get_version.outputs.VERSION }}
      is_release: ${{ steps.check_snapshot.outputs.RELEASE }}

    steps:
      - name: üõ°Ô∏è Harden the runner
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: üì¶ Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0

      - name: üá≥ Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "22.18.0"

      - name: üè∑Ô∏è Get package version
        id: get_version
        run: echo "VERSION=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: üîç Check if version is SNAPSHOT
        id: check_snapshot
        run: |
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          if [[ "$VERSION" == *"-SNAPSHOT"* ]]; then
            echo "RELEASE=false" >> $GITHUB_OUTPUT
          else
            echo "RELEASE=true" >> $GITHUB_OUTPUT
          fi
          echo "Release Version: $VERSION"

  release:
    needs: [fetch-version]
    if: ${{ github.event.workflow_run.conclusion == 'success' && needs.fetch-version.outputs.is_release == 'true' }}
    runs-on: ubuntu-24.04

    permissions:
      contents: write
      actions: read

    env:
      RELEASE_VERSION: ${{ needs.fetch-version.outputs.release_version }}

    steps:
      - name: üì¶ Checkout code
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5
        with:
          fetch-depth: 0

      - name: üá≥ Setup Node.js
        uses: actions/setup-node@49933ea5288caeca8642d1e84afbd3f7d6820020 # v4
        with:
          node-version: "22.18.0"

      - name: ‚¨áÔ∏è Download build artifact
        uses: dawidd6/action-download-artifact@ac66b43f0e6a346234dd65d4d0c8fbb31cb316e5 # v11
        with:
          workflow: ci.yaml
          name: blog-${{ github.event.workflow_run.head_sha }}
          path: dist
          github_token: ${{ secrets.GITHUB_TOKEN }}
          run_id: ${{ github.event.workflow_run.id }}

      - name: üìù Add licenses
        run: |
          cp LICENSE-MIT dist/LICENSE-MIT
          cp LICENSE-CC-BY-NC dist/LICENSE-CC-BY-NC

      - name: üì¶ Create archive
        run: |
          tar -czvf blog-${{ env.RELEASE_VERSION }}.tar.gz -C dist .
          shasum -a 512 blog-${{ env.RELEASE_VERSION }}.tar.gz > blog-${{ env.RELEASE_VERSION }}.tar.gz.sha512

      - name: üîñ Create Git Tag
        run: |
          git config user.name "radagastbot[bot]"
          git config user.email "radagastbot[bot]@users.noreply.github.com"
          git tag "v${{ env.RELEASE_VERSION }}"
          git push origin "v${{ env.RELEASE_VERSION }}"

      - name: üìù Generate changelog
        uses: orhun/git-cliff-action@98c93442bb05a455a77bee982867857ae748eeea # v4
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGELOG.md
          GITHUB_REPO: ${{ github.repository }}

      - name: üöÄ Create GitHub Release
        uses: softprops/action-gh-release@72f2c25fcb47643c292f7107632f7a47c1df5cd8 # v2
        with:
          files: |
            blog-${{ env.RELEASE_VERSION }}.tar.gz
            blog-${{ env.RELEASE_VERSION }}.tar.gz.sha512
          tag_name: v${{ env.RELEASE_VERSION }}
          name: Release v${{ env.RELEASE_VERSION }}
          body_path: CHANGELOG.md
          draft: false
          prerelease: true

      - name: üî¢ Generate next package Version
        run: |
          MAJOR=$(echo ${{ env.RELEASE_VERSION }} | cut -d. -f1)
          MINOR=$(echo ${{ env.RELEASE_VERSION }} | cut -d. -f2)
          PATCH=$(echo ${{ env.RELEASE_VERSION }} | cut -d. -f3)
          PATCH=$((PATCH + 1))
          NEXT_PACKAGE_VERSION="$MAJOR.$MINOR.$PATCH-SNAPSHOT"
          echo "Next Version will be: ${NEXT_PACKAGE_VERSION}"
          echo "NEXT_PACKAGE_VERSION=${NEXT_PACKAGE_VERSION}" >> $GITHUB_ENV

      - name: ‚¨ÜÔ∏è Increment package version
        run: npm version ${{ env.NEXT_PACKAGE_VERSION }} --no-git-tag-version

      - name: üì§ Push new package version to repo
        run: |
          git config user.name "radagastbot[bot]"
          git config user.email "radagastbot[bot]@users.noreply.github.com"
          git add package.json package-lock.json
          git commit -m "chore(release): set next SNAPSHOT version"
          git push
